video linked list lot comment sort thing want use linked list array factor point reading sort thinking well actually linked list linked list faster array go finding one faster let shoot array versus linked list first question start remind difference linked list array let start array probably understand array way memory start first value purpose demonstration going use structure contain ing multiple value talk object ago structure saw object collection value store integer array element zero got two got array element one got two like break got great element got two refer index start array size know big wan ted create allocate memory thing store value write one put going put one store put different value aswell need array works one big block memory thing one linked list works slightly different start beginning linked list point nothing add thing list memory going store two thing first thing label thing inside pand q lot p got q also extra thing tell us next empty put allocate space one structure one thing going store connect point first thing often call something like see video see done want store next thing allocate another one store value still got difference could anywhere else memory connect next pointer point next thing known starting point point first thing first thing second thing second thing would point third thing would point could computer memory end normally point known value often refer red null often number zero walk find next point zero null know come end two different ways data best amount data got difference one say fixed inside create store many thing know actually filled soon get eleven since final top array ca n go past eleven see yeah go however wan ted put something else thing get rid thing update point new thing make grow quite easily also really clever add thing middle beginning simply going go today probably going one actually faster well let think actually let define simple problem structure got two thing got integer cal led p integer cal led q saving linked list array let consider operation going go element array element linked list sum value p going add value going add array element p array p going effectively something going add linked list well going set first thing point p one time value p next one add missile want unique thing going visit every single element either array every single element linked list going visit every single element visit one element nature random access array mean fast way make difference unless first element one ever access first element look speed fuel directly random element array win hand think works case going consider want access every single element something case going sum value could thing represent ing say window screen want move around want redraw whatever something every single wall sort set problem going go array value linked list value si going sum actually add element p part structure done written see poem less identical going element array list linked list got structure contain integer p integer q array version got structure contain integer p interested q array item difference linked list one extra item next pointer next thing listen see hopefully go fast possibly rest main routine alist array random number generator random part program see store allocate memory element linked list set value everything else leave array paper run times going time long take run function add afford either list array work average time take calculate one print value built clock function c accurate accurate enough want real meat body program function list start array one possibly said variable zero going ked another variable going index array go equal zero first element get end number element say sum equal value already sum plus value ice element array p element remember said array p q want value p space within structure array going add get together list version similar set someone say p equal null n end list set p initially first thing linked list pointing first thing sum equal sum plus p inside p p inside variable asleep programmer set p r pointer point next thing follow link next thing linked list keep come end two program simple get term implement ing linked list array going run get value output going run going run raspberry pi actually going run tari behind mean need high peak high tech piece equipment need floppy disk transfer program topping mac run go tari assurance spot see gon na first got list first also going list value let load floppy disk used like back wait one crave ran awhile along simple program link list memory different element random number p value one let run word old hob bit computer game time word every apple secret long take lots oil n know another time times however long take allocate random number allocate memory clock speed actually take computer loaded code program floppy disk memory running generate data set need gon na sum everything happening happen memory taking process recording slight kill hope getting extra bit program going let run times get average actually looking value coming think safely assume average going end clock tick say q wop take going look going different clock perm use time thing ca n compare value directly could come read certainly see relative pattern call clock tick run linked list version program clock let run array version program going exactly thing going allocate array every time twenty five thousand element populate random value way written program actually pseudo random number sequence sum going fill time long take see whether array actually faster linked list whether linked list b array look like little pinny thing going faster yeah well n processor camera actually happening allocate space linked list allocate space element gym allocate space next element could different way speed thing classic way array allocate whole lot one go take one huge block memory times eight one g worth memory allocate one go going filling value setting seem spinning wheel going slightly faster would spin wheel fast learn read hear thing yeah give nice sort visual feedback running well plain white screen printing every hundred element ideal si update thing printing either dash line one two slash es make look like getting round printing little effect see something computer n faster get value working immediate thing see array taking tick quad kick compare two array linked list know right ca n argue come computer angular call always final average come roughly comparable basically much sort thing something q wop tick per second machine probably noticeable percent mean stop come know array slow wrinkly yep array ling get vendor video yeah video bring slash computer two ways walk ray went array smaller could also start index es move back smaller index es thought well let try ways let anyone posting comment saying went let run way wrote version walk together get exactly answer plus b equal b plus watch find line sure think would take exactly amount time update going reverse array wait going backwards array thing thing linked list well way designed linked list pointer next thing thing n pointer back previous singly linked list move forwards along could design doubly linked list backwards forwards pointer think star ted move backwards going exactly start beginning actually point testing exactly code different offset memory taking exactly amount time wait thing let run program mac see much faster let compile turning array thing make go fast poss comparison array test going compile speed test done going thing link test going say something really obvious honestly heck lot quick er machine get compile ready yeah much faster everything transferring across rather trying get old c compiler going also chance produce better code take make benefit speed pile let run linked list test done everything notice took lot quick er still roughly order still around remember different clock compare tick one different get average two hundred nine point five four acting tari much chick like tick ca n compare array test linked list test tari faster array test roughly take ten percent faster nothing really could say look difference mac mac take forty three point four four clock tick five times faster array tari linked list faster reverse array going quick er quick er original array quick er linked list everything good everything much bit possibility problem code something always going reveal something year need delve bit see really going remember wrote program c wrote high level language got compile instruction machine execute actually happening research show machine execute favor walking backwards something compare going upwards run array backwards program mac let compile one everything hilt test run speed test back run one array much faster according reversal rate faster forward array would expect value shown run reverse away fifteen twenty directly right would like stick answer would like change oh nervous excited actually tari faster linked list array mac way around going say going reverse reckon firm supposed reverse oh like indecisive person go average time forty seven point four six marginally slow marginally still order magnitude faster could raspberry piso compile array test compile noticeably compile test list version reverse test compile last repair let run get run array test get nine point seven five average array run link list get one eight five eight point six one linked list test run reverse get five run test assumed nothing ran test get data see faster array liquid operation trying got pretty interesting running tari linked list faster array unless ran array backwards case array faster linked list array going forward come back ran raspberry pi array twice fast linked list baby rarely backwards array mac view range height faster linked list whichever way went going well let ignore mac minute apple love bit let ignore mac though let look raspberry pi got tari raspberry pi go array speed link got one hundred seventy nine one hundred sixty six clock tick ca n compare clock tick different different different clock used compare relatively thing machine raspberry pi kish going well thing need remember look machine code roughly length number operation tari instruction take slightly longer execute get going need think back video difference raspberry pi c pu would much faster modern n cache every needs fetch every bit data needs fetch fetched memory time speaking believe something going broadly speaking cache half buffer want get detail see cash think c pu tari everything everything c pu needs fetch tari data array linked list course next pointer linked list come memory take amount time get two weather fetching data fetching instruction raspberry pi however still got main body c pu going execute thing memory well cache fact actually probably two cache one data instruction want see activate loo ked previous video access via cache n got get memory make difference surely thing still wake well tari theory basically memory memory much faster c pu twice fast memory provide data exactly c pu needs real need cash move ahead raspberry pi make course c pu much faster memory c pu ask something wait memory provide let figure happen run program raspberry instruction first time cache instruction cache first time go loop instruction going used loop cache instruction cap get immediately data particularly array would also collapse bit linked list n get one two time get call cache line pickup go get data already need cache well data already array right reason array run faster raspberry pi instruction coming straight institute basically giving us fast lane instruction get immediately data needs get main memory get cache well happen route list program except one crucial difference linked list poem make one memory access get data value going sum make another memory access go cat main memory address next thing make memory request may get satisfied main memory array one make one value interested cache get sort fast passing instruction actually second memory access get next pointer array list program end working twice fast tari everything coming memory n matter whether reading instruction reading bit still going come memory time actually front value already precalculate memory mean actually faster mean talking perhaps faster really billion get slight speed benefit show case took version program tari ran tari router difference arist use falcon falcon slightly later version processor cache instruction data cache ran times came array clock tick much faster processor anyway link tick falcon got cache like raspberry array version end traffic exactly program exactly machine code got cache array version end faster instruction professional sort fat pack cache rather go main memory time mean becomes faster linked list version tell thing n tal ked yet reverse array faster tari simple answer slightly different instruction instruction six allow decrement testing zero branch n one instruction actually make code slightly compact run slightly faster small enough time mac significantly faster getting sort five times faster well use slightly different compiler use clang c compiler mac rather two cheat squat got array axis es loop say rather loop around one array access loop around eight array access es one actually remove test loop make program much faster compiler program run faster answer whether raise faster link list much depend c pu machine built actually execute code ca n make assumption c pu execute code really need test see happening even within architecture family difference six falcon mean make based charity rally link list n true falcon move completely different architecture like raspberry pi chip get different effects best thing faced question question like sure come test collect real data able see going could array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list array v linked list