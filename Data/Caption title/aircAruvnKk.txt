This is a three . It 's sloppily written and rendered at an extremely low resolution of 28 by 28 pixels.But your brain has no trouble recognizing it as a three and I want you to take a moment to appreciateHow crazy it is that brains can do this so effortlessly ? I mean this this and this are also recognizable as threes , even though the specific values of each pixel is very different from one image to the next.The particular light-sensitive cells in your eye that are firing when you see this threeare very different from the ones firing when you see this three.But something in that crazy smart visual cortex of yoursresolves these as representing the same idea while at the same time recognizing other images as their own distinct ideasBut if I told you hey sit down and write for me a program that takes in a grid of 28 by 28pixels like this and outputs a single number between 0 and 10 telling you what it thinks the digit isWell the task goes from comically trivial to dauntingly difficultUnless you 've been living under a rockI think I hardly need to motivate the relevance and importance of machine learning and neural networks to the present into the futureBut what I want to do here is show you what a neural network actually isAssuming no background and to help visualize what it 's doing not as a buzzword but as a piece of mathMy hope is just that you come away feeling like this structure itself isMotivated and to feel like you know what it means when you read or you hear about a neural network quote-unquote learningThis video is just going to be devoted to the structure component of that and the following one is going to tackle learningWhat we 're going to do is put together a neural network that can learn to recognize handwritten digitsThis is a somewhat classic example forIntroducing the topic and I 'm happy to stick with the status quo here because at the end of the two videos I want to pointYou to a couple good resources where you can learn more and where you can download the code that does this and play with it ? on your own computerThere are many many variants of neural networks and in recent yearsThere 's been sort of a boom in research towards these variantsBut in these two introductory videos you and I are just going to look at the simplest plain-vanilla form with no added frillsThis is kind of a necessaryprerequisite for understanding any of the more powerful modern variants andTrust me it still has plenty of complexity for us to wrap our minds aroundBut even in this simplest form it can learn to recognize handwritten digitsWhich is a pretty cool thing for a computer to be able to do.And at the same time you 'll see how it does fall short of a couple hopes that we might have for itAs the name suggests neural networks are inspired by the brain , but let 's break that downWhat are the neurons and in what sense are they linked together ? Right now when I say neuron all I want you to think about is a thing that holds a numberSpecifically a number between 0 & 1 it 's really not more than thatFor example the network starts with a bunch of neurons corresponding to each of the 28 times 28 pixels of the input imagewhich is784 neurons in total each one of these holds a number that represents the grayscale value of the corresponding pixelranging from 0 for black pixels up to 1 for white pixelsThis number inside the neuron is called its activation and the image you might have in mind hereIs that each neuron is lit up when its activation is a high number ? So all of these 784 neurons make up the first layer of our networkNow jumping over to the last layer this has ten neurons each representing one of the digitsthe activation in these neurons again some number that 's between zero and oneRepresents how much the system thinks that a given image ? Corresponds with a given digit . There 's also a couple layers in between called the hidden layersWhich for the time being ? Should just be a giant question mark for how on earth this process of recognizing digits is going to be handledIn this network I chose two hidden layers each one with 16 neurons and admittedly that 's kind of an arbitrary choiceto be honest I chose two layers based on how I want to motivate the structure in just a moment and16 well that was just a nice number to fit on the screen in practiceThere is a lot of room for experiment with a specific structure hereThe way the network operates activations in one layer determine the activations of the next layerAnd of course the heart of the network as an information processing mechanism comes down to exactly how thoseactivations from one layer bring about activations in the next layerIt 's meant to be loosely analogous to how in biological networks of neurons some groups of neurons firingcause certain others to fireNow the networkI 'm showing here has already been trained to recognize digits and let me show you what I mean by thatIt means if you feed in an image lighting up all784 neurons of the input layer according to the brightness of each pixel in the imageThat pattern of activations causes some very specific pattern in the next layerWhich causes some pattern in the one after it ? Which finally gives some pattern in the output layer and ? The brightest neuron of that output layer is the network 's choice so to speak for what digit this image represents ? And before jumping into the math for how one layer influences the next or how training works ? Let 's just talk about why it 's even reasonable to expect a layered structure like this to behave intelligentlyWhat are we expecting here ? What is the best hope for what those middle layers might be doing ? Well when you or I recognize digits we piece together various components a nine has a loop up top and a line on the rightan 8 also has a loop up top , but it 's paired with another loop down lowA 4 basically breaks down into three specific lines and things like thatNow in a perfect world we might hope that each neuron in the second-to-last layercorresponds with one of these sub componentsThat anytime you feed in an image with say a loop up top like a 9 or an 8There 's some specificNeuron whose activation is going to be close to one and I do n't mean this specific loop of pixels the hope would be that anyGenerally loopy pattern towards the top sets off this neuron that way going from the third layer to the last onejust requires learning which combination of sub components corresponds to which digitsOf course that just kicks the problem down the roadBecause how would you recognize these sub components or even learn what the right sub components should be and I still have n't even talked aboutHow one layer influences the next but run with me on this one for a momentrecognizing a loop can also break down into subproblemsOne reasonable way to do this would be to first recognize the various little edges that make it upSimilarly a long line like the kind you might see in the digits 1 or 4 or 7Well that 's really just a long edge or maybe you think of it as a certain pattern of several smaller edgesSo maybe our hope is that each neuron in the second layer of the networkcorresponds with the various relevant little edgesMaybe when an image like this one comes in it lights up all of the neuronsassociated with around eight to ten specific little edgeswhich in turn lights up the neurons associated with the upper loop and a long vertical line andThose light up the neuron associated with a ninewhether or notThis is what our final network actually does is another question , one that I 'll come back to once we see how to train the networkBut this is a hope that we might have . A sort of goal with the layered structure like thisMoreover you can imagine how being able to detect edges and patterns like this would be really useful for other image recognition tasksAnd even beyond image recognition there are all sorts of intelligent things you might want to do that break down into layers of abstractionParsing speech for example involves taking raw audio and picking out distinct sounds which combine to make certain syllablesWhich combine to form words which combine to make up phrases and more abstract thoughts etcBut getting back to how any of this actually works picture yourself right now designingHow exactly the activations in one layer might determine the activations in the next ? The goal is to have some mechanism that could conceivably combine pixels into edgesOr edges into patterns or patterns into digits and to zoom in on one very specific exampleLet 's say the hope is for one particularNeuron in the second layer to pick up on whether or not the image has an edge in this region hereThe question at hand is what parameters should the network havewhat dials and knobs should you be able to tweak so that it 's expressive enough to potentially capture this pattern orAny other pixel pattern or the pattern that several edges can make a loop and other such things ? Well , what we 'll do is assign a weight to each one of the connections between our neuron and the neurons from the first layerThese weights are just numbersthen take all those activations from the first layer and compute their weighted sum according to these weights IFind it helpful to think of these weights as being organized into a little grid of their ownAnd I 'm going to use green pixels to indicate positive weights and red pixels to indicate negative weightsWhere the brightness of that pixel is some loose depiction of the weights value ? Now if we made the weights associated with almost all of the pixels zeroexcept for some positive weights in this region that we care aboutthen taking the weighted sum ofall the pixel values really just amounts to adding up the values of the pixel just in the region that we care aboutAnd , if you really want it to pick up on whether there 's an edge here what you might do is have some negative weightsassociated with the surrounding pixelsThen the sum is largest when those middle pixels are bright , but the surrounding pixels are darkerWhen you compute a weighted sum like this you might come out with any numberbut for this network what we want is for activations to be some value between 0 & 1so a common thing to do is to pump this weighted sumInto some function that squishes the real number line into the range between 0 & 1 andA common function that does this is called the sigmoid function also known as a logistic curvebasically very negative inputs end up close to zero very positive inputs end up close to 1and it just steadily increases around the input 0So the activation of the neuron here is basically a measure of how positive the relevant weighted sum isBut maybe it 's not that you want the neuron to light up when the weighted sum is bigger than 0Maybe you only want it to be active when the sum is bigger than say 10That is you want some bias for it to be inactivewhat we 'll do then is just add in some other number like negative 10 to this weighted sumBefore plugging it through the sigmoid squishification functionThat additional number is called the biasSo the weights tell you what pixel pattern this neuron in the second layer is picking up on and the biastells you how high the weighted sum needs to be before the neuron starts getting meaningfully activeAnd that is just one neuronEvery other neuron in this layer is going to be connected to all784 pixels neurons from the first layer and each one of those 784 connections has its own weight associated with italso each one has some bias some other number that you add on to the weighted sum before squishing it with the sigmoid andThat 's a lot to think about with this hidden layer of 16 neuronsthat 's a total of 784 times 16 weights along with 16 biasesAnd all of that is just the connections from the first layer to the second the connections between the other layersAlso , have a bunch of weights and biases associated with themAll said and done this network has almost exactly13,000 total weights and biases13,000 knobs and dials that can be tweaked and turned to make this network behave in different waysSo when we talk about learning ? What that 's referring to is getting the computer to find a valid setting for all of these many many numbers so that it 'll actually solvethe problem at handone thoughtExperiment that is at once fun and kind of horrifying is to imagine sitting down and setting all of these weights and biases by handPurposefully tweaking the numbers so that the second layer picks up on edges the third layer picks up on patterns etcI personally find this satisfying rather than just reading the network as a total black boxBecause when the network does n't perform the way youanticipate if you 've built up a little bit of a relationship with what those weights and biases actually mean you have a starting place forExperimenting with how to change the structure to improve or when the network does work ? But not for the reasons you might expectDigging into what the weights and biases are doing is a good way to challenge your assumptions and really expose the full space of possiblesolutionsBy the way the actual function here is a little cumbersome to write down . Do n't you think ? So let me show you a more notationally compact way that these connections are represented . This is how you 'd see itIf you choose to read up more about neural networksOrganize all of the activations from one layer into a column as a vectorThen organize all of the weights as a matrix where each row of that matrixcorresponds to the connections between one layer and a particular neuron in the next layerWhat that means is that taking the weighted sum of the activations in the first layer according to these weights ? Corresponds to one of the terms in the matrix vector product of everything we have on the left hereBy the way so much of machine learning just comes down to having a good grasp of linear algebraSo for any of you who want a nice visual understanding for matrices and what matrix vector multiplication means take a look at the series I did on linear algebraespecially chapter threeBack to our expression instead of talking about adding the bias to each one of these values independently we represent it byOrganizing all those biases into a vector and adding the entire vector to the previous matrix vector productThen as a final stepI 'll rap a sigmoid around the outside hereAnd what that 's supposed to represent is that you 're going to apply the sigmoid function to each specificcomponent of the resulting vector insideSo once you write down this weight matrix and these vectors as their own symbols you cancommunicate the full transition of activations from one layer to the next in an extremely tight and neat little expression andThis makes the relevant code both a lot simpler and a lot faster since many libraries optimize the heck out of matrix multiplicationRemember how earlier I said these neurons are simply things that hold numbersWell of course the specific numbers that they hold depends on the image you feed inSo it 's actually more accurate to think of each neuron as a function one that takes in theoutputs of all the neurons in the previous layer and spits out a number between zero and oneReally the entire network is just a function one that takes in784 numbers as an input and spits out ten numbers as an outputIt 's an absurdlyComplicated function one that involves thirteen thousand parameters in the forms of these weights and biases that pick up on certain patterns and which involvesiterating many matrix vector products and the sigmoid squish evocation functionBut it 's just a function nonetheless and in a way it 's kind of reassuring that it looks complicatedI mean if it were any simpler what hope would we have that it could take on the challenge of recognizing digits ? And how does it take on that challenge ? How does this network learn the appropriate weights and biases just by looking at data ? Oh ? That 's what I 'll show in the next video , and I 'll also dig a little more into what this particular network we are seeing is really doingNow is the point I suppose I should say subscribe to stay notified about when that video or any new videos come outBut realistically most of you do n't actually receive notifications from YouTube , do you ? Maybe more honestly I should say subscribe so that the neural networks that underlie YouTube'sRecommendation algorithm are primed to believe that you want to see content from this channel get recommended to youanyway stay posted for moreThank you very much to everyone supporting these videos on patreonI 've been a little slow to progress in the probability series this summerBut I 'm jumping back into it after this project so patrons you can look out for updates thereTo close things off here I have with me Lisha LiLee who did her PhD work on the theoretical side of deep learning and who currently works at a venture capital firm called amplify partnersWho kindly provided some of the funding for this video so Lisha one thingI think we should quickly bring up is this sigmoid functionAs I understand it early networks used this to squish the relevant weighted sum into that interval between zero and oneYou know kind of motivated by this biological analogy of neurons either being inactive or active ( Lisha ) - Exactly ( 3B1B ) - But relatively few modern networks actually use sigmoid anymore . That 's kind of old school right ? ( Lisha ) - Yeah or ratherReLU seems to be much easier to train ( 3B1B ) - And ReLU really stands for rectified linear unit ( Lisha ) - Yes it 's this kind of function where you 're just taking a max of 0 and a where a is given bywhat you were explaining in the video and what this was sort of motivated from I think was apartially by a biologicalAnalogy with howNeurons would either be activated or not and so if it passes a certain thresholdIt would be the identity functionBut if it did not then it would just not be activated so be zero so it 's kind of a simplificationUsing sigmoids did n't help training , or it was very difficult to trainIt 's at some point and people just tried relu and it happened to workVery well for these incrediblyDeep neural networks . ( 3B1B ) - All rightThank You Lishafor background amplify partners in early-stage VC invests in technical founders building the next generation of companies focused on theapplications of AI if you or someone that you know has ever thought about starting a company somedayOr if you 're working on an early-stage one right now the Amplify folks would love to hear from youthey even set up a specific email for this video 3blue1brown @ amplifypartners.comso feel free to reach out to them through that But what is a Neural Network? | Deep learning, chapter 1 But what is a Neural Network? | Deep learning, chapter 1 But what is a Neural Network? | Deep learning, chapter 1