[ Music ] hi everyone so as I stated in my lastvideo the goal of this video is to showyou how you can take an arbitrary pathand approximate it with increasingamounts of circular motion which windsup being something that has immensepractical applications I think as wellas a lot of artistic ones too so firstI 'm gon na say sorry for the slight delayin putting out this video unfortunatelyI had some issues with corrupt videofiles so I had to do a lot of rearaccording so you might have to forgivesome inconsistencies in video qualityand wardrobe now this video is dividedinto three parts the first part containsall of the mathematical prerequisitesthat you need and I tried to keep thisportion of the video at the level of astudent who might be at the end of theirhigh school career so if you 've seenintegrals complex numbers and maybe adot product in your life I think youshould be okay the second part of thevideo shows how you can use theinfrastructure of vector graphics onyour computer to take an arbitrary paththat you might draw and convert it intoa set of equations that you can use andthe third part goes over how you mightactually go about programming this so Ido want to mention that this is anincredibly technical video and if that'snot your cup of teaI hope you can check out some of myother videos or maybe join me next timewhere I 'll be doing a video aboutphilosophy which I 'm very excited aboutso the goal here is to talk about all ofthe mathematical prerequisites you needto do this so let 's start out with apath on the plane let me just draw aplane and you know there 's some crazypath you know it overlaps with itself itruns over itself occasionally and thenit ends where it started so it I guess Ishould call it a closed loop but notjust a path so one way you can thinkabout this is as a function so you canthink about this as you know there'ssome function f that map 's an intervalto this craziness in the plane andwhenever I talk about paths the intervalthat they 'll be mapping from is alwaysgoing to be 0 to 2 pi this is to makethings consistent and the 2 pi is therebecause it 'll make some of my formulaslater a lot easier though it does n't youknow you can you can do this math withwhatever you want so so here you have apath it 's defined by a function f whichtakes the interval from 0 to 2pi to theplain now one thing I want to say isthat our we 're gon na think about theplane interchangeably as either you knowthe two-dimensional Euclidean plane oras the complex plane so if you rememberthe x-axis can be thought of as the realaxis the y-axis can be thought of as theimaginary axis and if you think aboutthis picture that way what F is doing isits assigning the interval so it'sassigning every point in the interval toa complex number so another thing that Idefinitely want to mention is that Iwant my loops or my pads to be nice Ido n't want them jumping arounddiscontinuously I do n't want themoscillating violently I 'm not beingincredibly technical here but I guess ifyou can draw it with a marker your mathwill work out just fine there are thingsyou can do that will cause all of thisto break down but not stuff you run intolike naturally on a day-to-day basisanyways the goal here what is the goal Ishould say right now that my handwritingis not fantastic but I 'm just gon na sayloudly and proudly everything I writedown and hopefully that alleviates theissue the goal here is to approximate Fyou knowwe have to think about can we write Fapproximately as the sum of circularpads so a good point to start is what isa circular path and how exactly do I addthem so let 's start thereall right so what is a circular pathwell I can define infinitely manycircular paths very easily so I 'm gonnasay V n where n is an integer is definedby the formula T maps to e to the N I Tso what is this well let 's let 's justrun through a few examples what is V 1well V 1 has the formula T maps to e tothe I T which if you remember is thesame thing as cosine T plus I sine Twhich if you draw it out is just youstart at 1 and you go around the circleI 'm sorry you go around the origin oncein a circle of radius 1 reasonable whatis say V minus 2 well V minus 2 is Tmapping to e to the negative 2i t you dothat that 's also the same as starting at1 but this time you go around the originclockwise at twice the speed I onceagain you have to recall that all of ourfunctions map from an interval 0 to 2 pione other one I want to point out veryquickly is what is a run out of roomhere so what is V 0 well V 0 is Tmapping to e to the 0 I T which is juste to the 0 which is just 1 so V 0 is thepath that starts at 1 andjust does n't move it stays at one theentire time so you can modify thesepaths slightly by multiplying theequation by a complex number so let'sthink about what is I do n't know what isone plus I root three times v1 so whatis what is the path like what happens tothe path if I multiply it by thiscomplex number one plus I square root ofthree well just think about it for asecondwhere is one plus I of square root ofthree well I mean there 's no scale herebut let 's say it 's somewhere over herethis is one plus I square root of threethen you have to remember what doesmultiplication by a complex number doand what it does is it scales by themagnitude of the complex number and itrotates by the argument of the complexnumber and so multiplying this with theequation of v1 what that does is thatjust makes your circles start here andgo around the origin stillcounterclockwise in a circle once I hopethat makes sense if this were instead v2all right let 's say let 's say it were Vminus two then you would start here justas before and then go around the originclockwise in a circle twice and so thatis the effect that multiplying one ofthese circular V is with a complexnumber now to get more complicated padsyou can of course add everything we'veconstructed so far so you can thinkabout things like what is v1 plus 0.2 Itimes V minus 3 plus PI over 20 V minus7 plus 0.6 v8 you know you can thinklike what is that and what this doesbasically is it 'll take v1 which isgoing around the circle counterclockwiseonce and to that it will upend this andto that it will upend this and to thatit will upend that so you have sort offour circles now rotating simultaneouslymaking a complicated path and I justrealized now that I 've written this downthat I ca n't actually draw this so I'mjust gon na throw in a quick animation soyou can seewhat this particular path looks like nowof course I do n't want to just addrandom things togetherI want to approximate my original path fyou know that that crazy thing that Idrew at the beginning so the questionthen becomes okay I have these circularpaths the V ends how do i scale each VNbefore adding them if I want toapproximate F and there 's a very simpleformula like answer to this and I'mgoing to call what you have to scale VNby so the complex number that you haveto multiply VN by a and there 's a simpleformula for a N and it is an equals 1over 2 pi the integral from 0 to 2 pi Fof T e to the negative I and T DT okthat 's what the formula is this by theway is called the nth Fouriercoefficient of a very very importantobject in mathematics and like I saidwhat you can do is now you can you canmake a list of these circular paths soyou know you multiply a 0 by V 0 you doa minus 1 v minus 1 a 1 V 1 a 2 V 2 aminus 2 B minus 2 a 3 V 3 a minus 3bminus 3 and of course you know there'syou know it starts at negative infinityand goes all the way to infinity sothey 're they 're infinitely many circularpaths here and the big amazing fact islet 's say you start with this one just a0 V 0 nothing much happening and thenlet 's say you add three of them so thesethree and then you add five of them sothese 5 and then you add seven of them 7what will happen is as you add more andmore of these this will get closer andcloser to your original crazy path F nowthat is incredibly incrediblyastonishing and of course the firstquestion is why like how what like whywould this work and I think a good wayto approach that question at leastinitially is to start by asking whywould anyone even guess this formulalike why why did anyone even try toprove that this might work okay so thereason that what I told you just now wasa very natural thing to guess would workis that it generalizes conceptsintuitions and ideas that you 're alreadyfamiliar with in a finite dimensionalsetting so let 's say you 're working intwo dimensions you know you 're workingin a two dimensional Euclidean space andyou have a vector a to coordinate vectora a 1 a 2 and another one B b1 comma b2you might remember is that you cancompute an inner product or dot productof these two vectors so the innerproduct or some people might write dotproduct of a and B is the same thing asa 1 B 1 plus a 2 B 2 and if I were towrite this with a summation let 's sayit 's just the some AI bi where I goesfrom 1 to 2 it 's a simple formula you'veprobably seen it before now this devicehas a lot of geometric content attachedto it and it 's incredibly incrediblyuseful so let 's say we 're in a situationwhere you have two vectors intwo-dimensional spacethat both have length 1 and are at rightangles to each other so you know my dadmy two vectors they 're at right anglesto each other and they 're both have likethe one I 'm a call one of them v1 andanother one v2 now a lot of things workout very very quickly just by doingbasic trigonometry number one because Ijust said v1 has a length of 1 and v2has a length of 1 the first thing isthat if you take the inner product of V1 with theone you will get one the next thingsimilarly 4v2 actually if you take theinner product of V two would be two youget one now since V 1 and V 2 are rightangles to each other another fun fact isthat the inner product of V 1 and V 2 is0 this is true for any two vectors thatare at right angles to each other thisis actually a very easy way to testwhether or not two vectors are at rightangles to each other you can check theirinner product and see if you get 0 thesetwo are actually equivalent by the wayso if you want to test whether or notyou have two vectors that both have alength of 1 and are at right angles toeach other you can just check thesethree formulas it 's it they have AI theycontain identical information butthere 's actually more because if I takeanother vector somewhere over here W itdoes n't matter what W is it turns outit 's very easy to decompose W as alinear combination of V 1 and V 2 so itjust so happens that W no matter what Wis in this situation W is always goingto be the inner product of W with V 1 V1 plus the inner product of W with V 2 V2 if you 've never seen this before Idefinitely encourage you to think aboutit or if you 're lazy just look it up onWikipedia so when you have two vectorslike this it 's incredibly easy todecompose any vector lying out there asa linear combination of the two it'svery easy to figure out what thesecoefficients are now what I 'm going totry and convince you is that what'shappening here where that formula camefrom for the Fourier coefficients that Ijust told you about is just an infinitedimensional generalization of this verysimple picture that we already have intwo dimensions so let me just put theinfinite dimensional picture right hereokay so instead of two vectors let 's sayI have two pads P and Q so I do n't knowP looks like some crazy business Q lookslike its own crazy businessthey 're both paths now I can define aninner product of P and Q now when Idefine an inner product in the finitedimensional case I just sum the productof the coordinates but since now we'redealing with the infinite objects herethe natural thing to try is to do anintegral and since these paths are from0 to 2pi a good generalization of thisinner product is going to be let 's justintegrate the product from 0 to 2pi soPT QT DT we are very close to donehowever because we 're working withcomplex numbers the math just doesn'tquite work perfectly so I have to add alittle complex conjugate right here andI also have to scale otherwiseeverything when we when we compute ourformulas everything will just be scaledup slightly so I want to multiply 1 over2 pi here so what you do is you justfollow your nose and just generalize theformula for the inner product in theinfinite dimensional case and let 's justsee what happens now immediately onething you 'll notice is that just likethis case when you have two vectors thatboth have a length of 1 and are at aright angle to each other our V is thosepaths I defined earlier the e to the I Tto the 2i T whatever you notice that ifyou take the inner product of V n with Vn using this formula you will get 1always also you 'll notice that if youtake the inner product of VK with V Lwhere K is not equal to L you willalways get 0 so it seems like all ofthose paths all the VIS that I made allseem to be at right angles to each otherin infinite dimensional space just likethese are at right angles to each othernow all this would be you know like itlike a theoretical curiosity like whatdoes it mean to take an angle ininfinite dimensional space like welllike what is this nonsenseyou would be justified in arguing thatthis is all you know malarkey ifthis next formula also did n't generalizebut of course it does now if you recallwhat we said earlier is that f you canapproximate it as a sum of circularpaths if you just look at go startadding all the way from negativeinfinity and you get to a minus 3 vminus 3 a3 b3 and so on so what we saidearlier is that you can approximate F asa sum of circular paths by just twolooking at larger and larger sections ofthis crazy infinite sum now what I wantyou to notice is that these AIS areprecisely like if you remember what whatwhat are these ands each a.m. is 1 over2 pi the integral 0 to 2 pi F T e to thenegative I NT DT which is precisely theinner product of F with V n if you justlook at the formula previously this isprecisely what that is so what the sumactually is isso this is the same as this which as youcan see is a direct infinite-dimensionalgeneralization of the formula that Istated worked in two dimensions which iswhy this is an obvious guess that youwould naturally make for how to do thisbut of course the miraculous thing isthat this very obvious guess actuallyproduces usable approximations so I hopethat made sense but of course there areso many so many details that I amsuppressing here for example how do youprove that this actually works do youactually really mean all of these canyou really take limits for these sums Imean there 's just so many so manytechnical details that I 'm ignoring butif you 're curious about them and maybeif you 're at the level of maybe like afirst-year college student I wouldHIGHLY highly recommend this book so I'mputting it on the screen now so this isStein and Shekhar cheese introduction tofourier analysis I read this maybe likeseven or eight years ago and it containsall of the details that I ignored andwhat I feel is like an easyunderstandable way so this is my bookrecommendation in case you want to diginto this further but I think time hascome for us now to dive into thepractical aspects of actuallyimplementing thisall right so what we want to do to beginwith is to take an image and extract aset of equations out of it now my planto do this was to utilize as muchexisting infrastructure like I alreadyhad on my computer as possible so onething you 'll notice about this imagethat I drew for the previous video isthat if i zoom into itlet me recenter it then there 's no lossof quality and as I 'm sure a lot of youmay have already guessed that 's becausethis image is saved in what 's called avector graphics format now what is avector graphics format so most of imageformats that you encounter on a day today basis so you know like PNG or jpg orwhatever um the way they work is theysave information about how each pixelshould be colored and the issue withthat is well you know most of the timeit works out great but the issue withthat is if you want to zoom in very farthen you basically run out ofinformation and everything starts tolook incredibly you know chunky andblockyhowever what vector graphics the wayvector graphics work is instead ofsaving information about how each pixelshould be colored it saves informationabout how the image should be drawn soif you open a vector graphics file inlike a text editor you 'll seeinstructions on how to draw the image sofor instance if you look at this littlesection on top of the S over here I knowthat the way the computer is seeing thatis as a set of numbers that it can useto construct a bunch of quadraticequations and interpolate between themand like I said since the computer sincethe infrastructure to do that alreadyexists on the computer it seemed to methe easiest way to accomplish this taskis to just to make an image in a vectorgraphics format save it on the computerand just read the numbers off andreconstruct the equations from there Iwanted to show this whole process fromstart to finish so I 'm going to drawsomething and the program I 'm using todraw my vector graphic is a dope animateyou can also use illustrator and if youwant a free option I 've used Inkscapebefore and it works quite well if youwant to be really lazy aboutyou can also you know just type insomething space SVG into Google andit 'll you 'll probably hit something soif you type in like Apple SVG you'llfind someone has already made a vectorgraphic of an apple and you can just usethat if you like so I 'm going to startby a I do n't know maybe I guess I'llmake a leafyouall right so there it is I 'm aware thatI 'm not van Gogh but I wanted to makesomething quick and dirty and I thinkthis should work so the first thing Iwant to check and make sure is that theoutline of the shape is a singleunbroken path which it it seems to beall right so what I 'm gon na do next issave this as a vector graphics filealright so now that I have saved mydrawing as an SVG you can open it in abrowser and see once again zooming incauses no loss of detail and you have abeautiful well I mean it 's not exactly abeautiful drawing but I mean it looksokay so I just remember that the processthat I 'm about to show you works for anydrawing that you might draw so it doesnot have to be this weird-looking so thenext day I 'm gon na do is I 'm gon na openthe SVG in a text editor just so you canactually see the individual lists ofinstructions that your computer sees andthen I 'll explain what they mean exactlyso let 's do thatso here is everything opened in a texteditor I 'm using atom but you can usewhatever you want to get rid a notepadif you wanted to but it 's nice to use atext editor that recognizes you know xmlstyle files which is of course what thisis you know if you look at this file andthere 's a path and it 's the path that wewant this is our entire leaf and to drawthe path there 's a list of instructionsso you can see them mq lql so like Mfollowed by two numbers Q followed by abunch of numbers L followed by somenumbers and so on so MQ lql all the waydown so this is this full list is a youknow is a set of instructions for how todraw the path and so each of theseletters have a specific meaning and Ishould say that in a you know in youraverage SVG file you 'll find a lot moreletters than just M Q and L and ifyou 're curious about what they all meanwhat you should do is you can look it upon the Internet I think Mozilla has verygood documentation about how SVG 's workbut since our file only the onlydirectives it has is MQ and L I 'll justexplain what those mean because thoserelevant to our purposes so I'vetranslated the first two twoinstructions from here into plainEnglish I 'm gon na go over them and tellyou what they mean so the firstinstruction M meanmove - this is not that exciting so moveto this point eight hundred and twentyeight hundred and seventy two pointseven comma sixteen point one fivewritten this down here this is not thatexciting the next instruction is themore exciting one so instruction numbertwo is draw a quadratic Bezier curve nowwhat is a quadratic Bezier curve soquadratic Bezier curve is a parabolathat is is governed by three points it'sgoverned by an initial point a controlpoint and a final point but before Iexplain what the Bezier curve is let meexplain how to find these points in thefile so the initial point is the pointthat you 're already at so the point youjust moved to so the initial point iseight hundred and seventy two pointseven comma sixteen point one five andyou can see I copied that here that isthe initial point the control point isthe next point that 's listed next to theQ so in here and seventy two point threecomma sixteen point five five you cansee that here and the final point is thenext point so eight hundred and seventytwo point 4 comma 17.15 so I hope thatmakes sensenow I should explain what a quadraticBezier curve is I think a picture speakslouder than words here so it ok so thisis just from the you know the Wikipediaarticle on Bezier curves as you can seethe red parabola is the parabola thatwe 're after and p0 is the initial pointthe point that you start with p1 iswhat 's called the control point and p2is the final point now let 's let'sactually just derive the equation forthis parabola so you can use it I shouldmention that this a parabola starts at x0 and ends at time 1 so at x 0 it 's at p0 and a time one it is at p2 to derivean equation for this what you have to dois notice that there 's a green pointhere you can see it that starts at p 0and ends at p 1 at time 1 so at time 0it 's a p 0 and a time 1 it ends at p 1let 's first write down the equation forthat point and once again remember thatp 0 is our initial point p 1 is ourcontrol point and P 2 is our final pointso what is the equation for the pointthat starts at time 0 at the initialpoint and ends at time 1 at the controlpoint well let 's just write it heresolet 's just do one minus T initial plus Ttimes the control as you can check thatif you plug 0 into this equation you'llget the initial point and if you plug 1into this equation you will get thecontrol point and the intermediate T'swill give you intermediate points sothis is the equation for this path we'reto come up the path that starts at p 0and ends at p 1 similarly there'sanother Green Point that starts at thecontrol point and ends at the finalpoint at at time 1 so I hope that makessense so what 's the equation for thispoint well it 's 1 minus T times thecontrol point plus T time times thefinal point I hope that makes sense nowwhat is the equation for the point thattravels between the two green pointsfrom time 0 to time one after all thatis the black point that we 're after thatis the point that is drawing ourparabola so like once again it is thepoint that starts at the first greenpoint at time zero and ends at the finalgreen point at time one well that is asimple equation too so same way 1 minusT times the equation for the first greenpoint plus T times the equation for thefinal grade point I had not intended todo this derivation I just got excitedbut I hope that made sense and if it didnot make sense because I guess it was alittle slapdash just look at theequation it 's on Wikipediajust look up quadratic Bezier curve orbezier curve in general and you 'll findthis equation on wikipedia it 's and thenyou can take your time to figure it outif you like so anyways theseinstructions what they 're telling you soinstruction 1 is moved to eight hundredand seventy two point seven sixteenpoint one five instruction two is draw acurve with this equation that I'vewritten out now and instruction three istwoso we have n't yet left this Q line so wewere here right this is the last pointthat we looked at so instruction threeis draw another quadratic distance soinstruction three is a draw anotherquadratic Bezier curve so once again youstart at the point you last you endedyour last instruction on so we ended ourlast instruction on 872 point four and17.15 and that 's our initial point inthis situation our control point is thenext point over so eight hundred andseventy five point seven and sixty sixpoint nine five and our final point inthis situation is eight hundred andthirty point one and seventy one pointsix and just like that you keep drawingquadratic Bezier curves again and againuntil you reach the end of this linewhich is right here and then the nextdirection is L which you may haveguessed is just draw a line and you drawa line from the point where you endedyour last instruction so in this casethree hundred and seventy point zerofive three hundred fourteen point zerofive and you end your line at threehundred seventy point zero five three orfourteen point one five and so on andyou just keep doing this you just keepgoing down the list I hope this makessense and once again if it does n't thisis documented in a million places acrossthe internet how to read these files andonce again Mozilla has gooddocumentation for this and I 'll put itin the description so you know you justgo down this list and now you I meanfrom here you actually get a set ofequations that you can use so the nextstep is to program a computer to do whatwe were doing by hand here so let'slet 's go to that stepall right so I 've opened my Mathematicafile and this file is where this videowill end so I 'm just gon na write out allof my code and you can see it in actionand I should say that I was kind ofdebating not including this part in thevideo in part because I do n't I meanMathematica is not a programminglanguage a lot of people use and Idid n't want anyone to feel like you knowif their preferred language isJavaScript or Python or you know if theylike MATLAB I do n't want people to feelthat you know they need Mathematica todo this you could program this on agraphing calculator you could do it on apotato if you wanted what matters isthat you understand the concepts so theway I 'm going to structure the rest ofthis video is I 'm going to write a fewlines of code I 'm going to explain whatthey do and then write a few more andexplain what they do and the code isgoing to be sort of very slapdash andhacky I do n't want to get into you knowthe implementation of good Mathematicacode that is not what this video isabout so I 'm just gon na try and do thisas quickly as possible and make sure theconcepts are as clear as I can possiblymake them let 's do this all righteveryone so this is the first few linesof code the first step is to import thelist of instructions so I just copiedthat list of instructions you know theMQ l 's and so forthand I put it in a text file called rawleaf data and here you can see I'veimported it actually let 's take a lookat that a text file that I just importedas one long string and so here it is andthere are few things about the way thatthis is organized that make it superduper annoying and so I think some whatthis code actually does is it preprocesses things a little bit to makethis a lot nicer so the first thing youmay have noticed is that it 's weirdhaving a bunch of numbers just toocrammed next to each other when some ofthose numbers are x-coordinates and someof them are y-coordinates so it would bereally nice if you know these pairs wereactually organized as pairs anotherissue with this as you may have noticedthat every single number is positive andthat works very well for images but forthe type of math that we want to be doit 's more convenient to have all ofthese points sort of hovering around theorso one thing we need to do is or atleast it 's convenient to do you don'thave to do it is to translate all ofthese points so that you know their adyou know their their center of mass isbasically at the origin and then thethird thing is that images have thisreally weird coordinate system where theorigin is in the top left which meansthe x-axis works like you would expectlike moving right is the same asincreasing the x-value however they-axis is backwards so increasing they-value and an image actually pushes youdown in the image and so we need to flipall our y-values you know we need to doa reflection just so just so that itmakes sense to the computer and our mathdoes n't get all screwed up and thosethree things by the way are what thislittle section of code does so it doesthe you know moving everything so it'scentered at the origin flipping they-values and pairing the x and ycoordinates now the next thing I want tomention is and actually you mightremember this from earlier but in orderto make this type of format super dupercompact every instruction is assumed tostart at the point where the previousinstruction ended so for example if youlook at line three here it just saysline and there 's a point which obviouslyyou need more than one point to define aline and it 's assumed that if you sayline point what you 'll do is you 'll lookback at the previous instruction look atthe point that the previous instructionended with and use that point to startthe line and while this makes for verycompact files it makes for very hardreading so one thing that I would liketo do is sort of you know take when I domy reorganization I want to take thepoint that a previous instruction endedwith copy it and paste it in the nextinstruction just so it 's easier to readso now if you reorganize things this waythis line is way easier to read it'sjust like okay line start here and therevery simple and that little bit ofreorganization for every single line iswhat this piece of code does um and thenthere are a few other minor things andonce you do that bit of reorganizationwhere you copy the end of the previousinstruction into the next instructionyou no longer need this first lineand that 's basically it I mean there'sone final line of code that takes eachindividual line and splits it up intoits components so for example if youlook at line three here line three isinstructing you to draw a bunch ofquadratic Bezier curves and what thisline of code does is it splits it upinto the individual quadratic Beziercurves and stores and you know it storesall of this into a variable that i'vecalled pieces let 's actually take a lookat pieces as you can see this is waymore beautifully organized than this wasit 's so easy to read so okay start witha quadratic Bezier curve this is theinitial point this is the control pointthis is the final point then anotherquadratic Bezier curve this is theinitial point this is the control pointthis is the final point and so on sothis is a line this is the initial pointthis is a final point so now that we aredone with our reorganization and our setof instructions is very easy to read wecan proceed further this next bit ofcode is I think pretty self-explanatoryso I 've defined the actual equations fora line or a quadratic Bezier curve andI 'm just substituting that into mypieces so if you remember each piececontains it 's like a quadratic piecewill contain the initial point thecontrol point and the final point andnow I 'm just putting in the actualequations for that and I 've called thevariable where all that is stored piecefunctions and I already done this so youcan check there you go a list ofequations which is exactly what we'vebeen wanting this whole time one thing Iwant to say is that remember that in ourspace all our pads are defined on aninterval from 0 to 2pi so you 're gonnahave to scale so you know there 's likemaybe you know they 're like a hundred orso pieces to this and so you know youcan divide your interval from zero to2pi into 100 or so pieces and then eachpiece gets its each piece of theinterval gets its own little functionand so you just just scale appropriatelywhen I originally did this I had a morecomplicated system where the scaling wasbased on the actual length the length ofthe curve soyou would like if there was a quadraticBezier curve I would compute its lengthand then the amount of time spentdrawing that curve was proportional tothe length of the curve which issomething that you could try but I don'tthink you have to do it all right sothis next section of code computes theindividual Fourier coefficients and Ihave to say we 're almost home so hereyou can see the formula for theindividual Fourier coefficients so hereyou 're integrate you 're doing 1 over 2pi times the integral of e to thenegative I J X times a piece but thenyou got to add over all the individualpieces integrating them over theirrespective domains you know you add thatall up you should get 2 you know like Iguess the J 's Fourier coefficient and asyou can see I have J running fromnegative a thousand to a thousand sothat 's about two thousand Fouriercoefficients and one thing I did is Iwrote these two a file as I computedthem just in case everything crashed andburned I would not have to start thecomputation over so here is that file sothe way it 's saved is it 's saved in abunch of pairs each on a new line andthe first element of the pairs the indexof the Fourier coefficient and thesecond element of the pair is the actualFourier coefficient and then I importedthat file back in and saved it as youknow a list of Fourier coefficients onething I did here that I did not do inthe previous video is that I 've sortedthe Fourier coefficients based on howbig they are and so that means in thefinal product when actually draw theepicycles the biggest one will be in thecenter and they 'll get smaller as you goout and I believe that should make for aprettier picture but I have to say I'mnot 100 % sure so we 'll have to see whathappens I actually think this would be agood moment to do a sanity checkso let 's actually let 's actually add upthe partial sum so let 's actually do eto the e to the I T times the I it'sFourier coefficient and just add it upand plot it all from 0 to 2pi and see ifwe get the original image back so youcan think of this plot as you know whatyou should what you get at the end ofrotating all of the epicycles but I'mnot actually drawing any of theepicycles so let 's yeah let 's just seehow it looks solet 's do a parametric plot where T goesfrom 0 to 2pi and what am i plottingokay I got I got to add the eighthFourier coefficient times e to the I Tso let 's see total what am i what am iadding okay so take over the free acoefficients C and Act so the I Fouriercoefficient is the second element of thepair that 's where this 2 is coming fromand e to the I times the first elementof the pair so that 's the index times Tokay that should do itoh oh one more thing so this total willreturn a complex number so I need toconvert that into a pair of real numberslet me just do that real fast so thereal part the imaginary part okay okaythis should work nopevery nice so now we know all this worksall we have to do is draw this same plotmore slowly actually showing theepicycles all right so this is the lastfew lines you compute the Centers ofeach of the epicycles circle centers asI 've called it here by just adding justadding one after another more fouriercoefficient times the appropriate e tothe i t times some constant so you addone more and that gives you the nextcircle center and then you add anotherone that gives you the next circlecenter and that 's basically what I'vedone here nothing too exciting here andthen you just make the graphic so youdraw circles at each of these circlecenters that we 've computed and you makea parametric plot the same one that Imade earlier when I was doing my sanitycheck and I do n't know I colored thebackground greenI 'm just hit enter here and this shouldwork so let 's see let 's just test it sothe graphic at let 's say time one it'staken a second yeah I do n't have failedby green try to pick a good color schemeand I hope okay that 's not so badso yeah that 's what it looks so now youcan see all the epicycles and you cansee it slowly drawing let me show thesame graphic at the very ends of time2pi no that looks pretty goodI 'm gon na do min just a little bit justto see yeah not bad so you can see all2000 circles here and you can see itfinishing drawing so to actually justget the animation I just have to exporteach of these individual frames as animage and then I 'm done so that actuallyworked out pretty well let 's actuallylook at an animation here so I'veexported about 10 seconds worth offrames here and at 30 frames per secondthat 's 300 frames enjoyyouall right thank you all so much forwatching if you enjoyed that hit thelike button and subscribe to the channeland follow me on Twitter peace Fourier Analysis For The Rest Of Us Fourier Analysis For The Rest Of Us Fourier Analysis For The Rest Of Us